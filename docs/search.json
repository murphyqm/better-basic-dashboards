[
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources and reading",
    "section": "",
    "text": "These are just a small selection of the tools I use very regularly; many many more exist, and my choice of the following is purely personal preference.\n\n\n\nWAVE: this web accessibility evaluation tool allows you to simply plug in a URL and see potential errors and issues. It’s also available as a browser plugin.\nChrome developer tools (also opened from Chrome with ctrl+shift+i): the mobile layout preview is particularly useful for checking any layout issues in your app. Similar tools exist for Firefox, I just haven’t used these for website/webapp testing.\n\n\n\n\n\nViz palette, a tool to assess your colour choices. This explanatory article is worth a read too.\nColorgorical, a tool for creating colour palettes, and the associated paper.\nChroma.js Color Palette Helper\n\n\n\n\n\nWhile the Quarto documentation is fantastic, I found the following resources really useful when figuring out how to use Quarto as a basis for custom websites and static dashboards.\n\nLecture slides: “Customizing Quarto Websites”. These slides walk you through practicalities like setting up custom fonts from Google Fonts, and delves into Sass, CSS, and HTML5.\n\n\n\n\n\nColor in UI Design: A (Practical) Framework\n\n\n\n\nPlease note that good, accessible colour palettes for web design are not always going to be the same as good, accessible colour palettes for data visualisation!\n\nData color picker\nAccessible color palette generator"
  },
  {
    "objectID": "resources.html#accessibility-tools",
    "href": "resources.html#accessibility-tools",
    "title": "Resources and reading",
    "section": "",
    "text": "These are just a small selection of the tools I use very regularly; many many more exist, and my choice of the following is purely personal preference.\n\n\n\nWAVE: this web accessibility evaluation tool allows you to simply plug in a URL and see potential errors and issues. It’s also available as a browser plugin.\nChrome developer tools (also opened from Chrome with ctrl+shift+i): the mobile layout preview is particularly useful for checking any layout issues in your app. Similar tools exist for Firefox, I just haven’t used these for website/webapp testing.\n\n\n\n\n\nViz palette, a tool to assess your colour choices. This explanatory article is worth a read too.\nColorgorical, a tool for creating colour palettes, and the associated paper.\nChroma.js Color Palette Helper"
  },
  {
    "objectID": "resources.html#guides-to-using-quarto",
    "href": "resources.html#guides-to-using-quarto",
    "title": "Resources and reading",
    "section": "",
    "text": "While the Quarto documentation is fantastic, I found the following resources really useful when figuring out how to use Quarto as a basis for custom websites and static dashboards.\n\nLecture slides: “Customizing Quarto Websites”. These slides walk you through practicalities like setting up custom fonts from Google Fonts, and delves into Sass, CSS, and HTML5."
  },
  {
    "objectID": "resources.html#general-uiux-design-articles",
    "href": "resources.html#general-uiux-design-articles",
    "title": "Resources and reading",
    "section": "",
    "text": "Color in UI Design: A (Practical) Framework"
  },
  {
    "objectID": "resources.html#other-colour-tools",
    "href": "resources.html#other-colour-tools",
    "title": "Resources and reading",
    "section": "",
    "text": "Please note that good, accessible colour palettes for web design are not always going to be the same as good, accessible colour palettes for data visualisation!\n\nData color picker\nAccessible color palette generator"
  },
  {
    "objectID": "using-quarto.html",
    "href": "using-quarto.html",
    "title": "How to build a static dashboard and website with quarto",
    "section": "",
    "text": "The Quarto docs are a great resource, so instead of just reinventing the wheel here, I will discuss how to customise the settings available, and combine both the website and dashboard layout options.\n\n\nIn addition to the general set-up guidance for building a website with Quarto, there are some things you’ll want to add to your configuration in order to ensure theming across your website and dashboard is consistent.\n\nFirst: pick a default Bootswatch theme to modify.\nThen, pick the colour scheme you want to use (see Resources for a list of tools to help with this).\nPick the default font you want to use, for example from Google Fonts.\n\nOnce you’ve made your decision with all the above, you can start to add these to your custom style files. To do this, you need:\n\nThe hex codes of your chosen colours.\nThe “embed code” of your chosen font (you can find this on Google fonts by clicking “Get font” and then “embed”).\nAn scss file.\n\nSee these lecture slides for an in-depth discussion of how to create custom style files for more information.\nFor example, I’ve picked the “Nunito” font, and the following colour scheme (plus white and grey):\n\n\nMy scss file needs to include both the font (this is at the very top of the file, starting with @import) and the colour codes to form my default palette. Again, read these lecture slides for more context. Click below to see the style file for this website.\n\n\n\n\n\n\ncustom.scss file\n\n\n\n\n\n\n/*-- scss:defaults --*/\n\n// Import Google fonts\n@import url('https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap');\n\n$font-family-sans-serif: \"Nunito\";\n$font-family-serif: \"Nunito\";\n$font-size-root: \"16px\";\n\n\n// scss-docs-start theme-color-variables\n$primary:       #64286f !default;\n$secondary:     #FFF !default;\n$success:       #2b7043 !default;\n$info:          #125f70 !default;\n$warning:       #D9831F !default;\n$danger:        #7c3689 !default;\n$light:         #e9dded !default;\n$dark:          #4c1b56 !default;\n// scss-docs-end theme-color-variables\n\n// scss-docs-start theme-colors-map\n$theme-colors: (\n  \"primary\":    $primary,\n  \"secondary\":  $secondary,\n  \"success\":    $success,\n  \"info\":       $info,\n  \"warning\":    $warning,\n  \"danger\":     $danger,\n  \"light\":      $light,\n  \"dark\":       $dark\n) !default;\n\n// colors\n\n$navbar-bg: $secondary;\n$navbar-fg: $primary;\n\n$link-color: $info;\n$hover-color: lighten($info, 40%);\n\n/*-- scss:rules --*/\n.card-header {\n  background-color: lighten($danger, 40%);\n}\n\n.nav-item &gt; a:hover {\n  color: $info;\n}\n\n.nav-link {\n  color: $danger;\n}\n\n.tabset .nav-link {\n  color: $danger;\n}\n\n\n\n\nIn your configuration file, _quarto.yml, you will need to point to the scss file. Click below to see the config file for this website.\n\n\n\n\n\n\n_quarto.yml file\n\n\n\n\n\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"Better basic dashboards\"\n  navbar:\n    left:\n      - href: about.qmd\n        text: Getting Started\n      - href: using-quarto.qmd\n        text: Guidance for Quarto\n      - href: resources.qmd\n        text: Resources\n  page-footer:\n    background: secondary\n    left: Copyright 2024, Maeve Murphy Quinlan\n    right: This website is built with , [](https://github.com/murphyqm/better-basic-dashboards){target=_blank}, and [Quarto](https://quarto.org/){target=_blank}\n\n\nformat:\n  html:\n    theme: \n      - litera\n      - custom.scss\n    toc: true\n\n\n\n\n\n\n\nQuarto now provides a very basic dashboard-building functionality. While the functionality is quite limited, the fact it 1. works with a selection of different languages (Python, R, Julia, and Observable), 2. with a selection of different components and libraries (Plotly, Leaflet, Jupyter Widgets, htmlwidgets; static graphics (Matplotlib, Seaborn, ggplot2, etc.)), and 3. separates out web design from data visualisation makes it a very useful tool.\nDashboards can be built from Jupyter notebooks or plain .qmd files. The following is the workflow I’ve found to work well for Python dashboards; this is just personal opinion!\n\nCreate a Python environment with Jupyter and all my required Python libraries (Numpy, Plotly, Pandas, itables etc.). I’ve been giving Pixi a go recently, but use your favourite package manager.\nDevelop the visualisations and data tables etc. that you want to show in your Jupyter notebook.\nWhen you’re ready to build the dashboard, copy your Python snippets across to a .qmd file with your dashboard layout commands (see the docs). I migrate from Jupyter notebook so that: 1. I don’t have to add the --execute command when I render the webapp, and 2. for more streamlined version control.\nTry rendering your dashboard on its own to check that it works: quarto render dashboard-name.qmd.\nAdd it to the navigation menu list in your _quarto.yml file. When you use quarto render in the project directory (from your active Python environment with all required libraries installed) you should return a website including a page that holds your dashboard, themed to match the rest of your website."
  },
  {
    "objectID": "using-quarto.html#basic-website-setup",
    "href": "using-quarto.html#basic-website-setup",
    "title": "How to build a static dashboard and website with quarto",
    "section": "",
    "text": "In addition to the general set-up guidance for building a website with Quarto, there are some things you’ll want to add to your configuration in order to ensure theming across your website and dashboard is consistent.\n\nFirst: pick a default Bootswatch theme to modify.\nThen, pick the colour scheme you want to use (see Resources for a list of tools to help with this).\nPick the default font you want to use, for example from Google Fonts.\n\nOnce you’ve made your decision with all the above, you can start to add these to your custom style files. To do this, you need:\n\nThe hex codes of your chosen colours.\nThe “embed code” of your chosen font (you can find this on Google fonts by clicking “Get font” and then “embed”).\nAn scss file.\n\nSee these lecture slides for an in-depth discussion of how to create custom style files for more information.\nFor example, I’ve picked the “Nunito” font, and the following colour scheme (plus white and grey):\n\n\nMy scss file needs to include both the font (this is at the very top of the file, starting with @import) and the colour codes to form my default palette. Again, read these lecture slides for more context. Click below to see the style file for this website.\n\n\n\n\n\n\ncustom.scss file\n\n\n\n\n\n\n/*-- scss:defaults --*/\n\n// Import Google fonts\n@import url('https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap');\n\n$font-family-sans-serif: \"Nunito\";\n$font-family-serif: \"Nunito\";\n$font-size-root: \"16px\";\n\n\n// scss-docs-start theme-color-variables\n$primary:       #64286f !default;\n$secondary:     #FFF !default;\n$success:       #2b7043 !default;\n$info:          #125f70 !default;\n$warning:       #D9831F !default;\n$danger:        #7c3689 !default;\n$light:         #e9dded !default;\n$dark:          #4c1b56 !default;\n// scss-docs-end theme-color-variables\n\n// scss-docs-start theme-colors-map\n$theme-colors: (\n  \"primary\":    $primary,\n  \"secondary\":  $secondary,\n  \"success\":    $success,\n  \"info\":       $info,\n  \"warning\":    $warning,\n  \"danger\":     $danger,\n  \"light\":      $light,\n  \"dark\":       $dark\n) !default;\n\n// colors\n\n$navbar-bg: $secondary;\n$navbar-fg: $primary;\n\n$link-color: $info;\n$hover-color: lighten($info, 40%);\n\n/*-- scss:rules --*/\n.card-header {\n  background-color: lighten($danger, 40%);\n}\n\n.nav-item &gt; a:hover {\n  color: $info;\n}\n\n.nav-link {\n  color: $danger;\n}\n\n.tabset .nav-link {\n  color: $danger;\n}\n\n\n\n\nIn your configuration file, _quarto.yml, you will need to point to the scss file. Click below to see the config file for this website.\n\n\n\n\n\n\n_quarto.yml file\n\n\n\n\n\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"Better basic dashboards\"\n  navbar:\n    left:\n      - href: about.qmd\n        text: Getting Started\n      - href: using-quarto.qmd\n        text: Guidance for Quarto\n      - href: resources.qmd\n        text: Resources\n  page-footer:\n    background: secondary\n    left: Copyright 2024, Maeve Murphy Quinlan\n    right: This website is built with , [](https://github.com/murphyqm/better-basic-dashboards){target=_blank}, and [Quarto](https://quarto.org/){target=_blank}\n\n\nformat:\n  html:\n    theme: \n      - litera\n      - custom.scss\n    toc: true"
  },
  {
    "objectID": "using-quarto.html#create-your-dashboard",
    "href": "using-quarto.html#create-your-dashboard",
    "title": "How to build a static dashboard and website with quarto",
    "section": "",
    "text": "Quarto now provides a very basic dashboard-building functionality. While the functionality is quite limited, the fact it 1. works with a selection of different languages (Python, R, Julia, and Observable), 2. with a selection of different components and libraries (Plotly, Leaflet, Jupyter Widgets, htmlwidgets; static graphics (Matplotlib, Seaborn, ggplot2, etc.)), and 3. separates out web design from data visualisation makes it a very useful tool.\nDashboards can be built from Jupyter notebooks or plain .qmd files. The following is the workflow I’ve found to work well for Python dashboards; this is just personal opinion!\n\nCreate a Python environment with Jupyter and all my required Python libraries (Numpy, Plotly, Pandas, itables etc.). I’ve been giving Pixi a go recently, but use your favourite package manager.\nDevelop the visualisations and data tables etc. that you want to show in your Jupyter notebook.\nWhen you’re ready to build the dashboard, copy your Python snippets across to a .qmd file with your dashboard layout commands (see the docs). I migrate from Jupyter notebook so that: 1. I don’t have to add the --execute command when I render the webapp, and 2. for more streamlined version control.\nTry rendering your dashboard on its own to check that it works: quarto render dashboard-name.qmd.\nAdd it to the navigation menu list in your _quarto.yml file. When you use quarto render in the project directory (from your active Python environment with all required libraries installed) you should return a website including a page that holds your dashboard, themed to match the rest of your website."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Building better dashboards",
    "section": "",
    "text": "Webapps and dashboards are becoming an ever more popular way to present and share the results of data science projects. While dashboards can be a great way to communicate findings, they also present a range of challenges when it comes to accessible UI design.\n\n\n\nResearchers are not web/UX designers, and have to “muddle through” when it comes to making decisions about colour schemes and navigation.\n\nWeb accessibility requirements and how to implement features that meet these requirements are often not covered in framework documentation or tutorials.\n\nFrameworks designed to allow easy porting of research analysis into webapps often use languages not specifically designed for web design (e.g. Python, R), making it sometimes difficult to customise variables required for good web accessibility.\nImplementation of custom theming and css files can be varied across different frameworks (Shiny for R and Python, Dash, Streamlit), making it challenging to enforce a standard theme across a range of different web apps (for example, from a single research group).\nHosting of interactive webapps is expensive and difficult to budget for due to cloud subscription models.\nNavigation of interactive webapps is more chalenging that a static web page as often times back and forward browser keys do not work as intended.\n\nWhile almost every issue around branding and accessibility can be met with some custom css and html, I wanted to put together some easy-to-implement tools for people building simple webapps in order to make customising appearance that little bit easier.\n\n\n\n\n\n\nWho is this useful for\n\n\n\nHopefully this resource will be useful to you if you are building your first webapp, or if you have built a simple webapp before and struggled to apply consistent theming to it with custom css.\nAdditionally, this should be useful to anyone (or any group) that needs to produce multiple web apps with a similar look/branding, but is using a range of different tools (so both R and Python, for example).\nSo far, this resource mainly deals with basic webapps that can be rendered statically (so some minor interactivity in-browser); however, Quarto allows for fully-developed interactivity with packages like Shiny, so in the future I might develop this further to show how you can build a full dashboard/webapp and containerise it for hosting."
  },
  {
    "objectID": "index.html#common-issues-with-webapp-design",
    "href": "index.html#common-issues-with-webapp-design",
    "title": "Building better dashboards",
    "section": "",
    "text": "Researchers are not web/UX designers, and have to “muddle through” when it comes to making decisions about colour schemes and navigation.\n\nWeb accessibility requirements and how to implement features that meet these requirements are often not covered in framework documentation or tutorials.\n\nFrameworks designed to allow easy porting of research analysis into webapps often use languages not specifically designed for web design (e.g. Python, R), making it sometimes difficult to customise variables required for good web accessibility.\nImplementation of custom theming and css files can be varied across different frameworks (Shiny for R and Python, Dash, Streamlit), making it challenging to enforce a standard theme across a range of different web apps (for example, from a single research group).\nHosting of interactive webapps is expensive and difficult to budget for due to cloud subscription models.\nNavigation of interactive webapps is more chalenging that a static web page as often times back and forward browser keys do not work as intended.\n\nWhile almost every issue around branding and accessibility can be met with some custom css and html, I wanted to put together some easy-to-implement tools for people building simple webapps in order to make customising appearance that little bit easier.\n\n\n\n\n\n\nWho is this useful for\n\n\n\nHopefully this resource will be useful to you if you are building your first webapp, or if you have built a simple webapp before and struggled to apply consistent theming to it with custom css.\nAdditionally, this should be useful to anyone (or any group) that needs to produce multiple web apps with a similar look/branding, but is using a range of different tools (so both R and Python, for example).\nSo far, this resource mainly deals with basic webapps that can be rendered statically (so some minor interactivity in-browser); however, Quarto allows for fully-developed interactivity with packages like Shiny, so in the future I might develop this further to show how you can build a full dashboard/webapp and containerise it for hosting."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Getting Started",
    "section": "",
    "text": "Webapps and dashboards are becoming an ever more popular way to present and share the results of data science projects. While dashboards can be a great way to communicate findings, they also present a range of challenges when it comes to accessible UI design.\n\n\nTo start off, I’d really recommend you read this brief blogpost on web accessibility standards from Jumping Rivers.\nOnce you’ve scrolled through, this website provides you with much more detailed information, including introductory videos. This resource contains a slightly overwhelming amount of information, so I would recommend dipping in and out.\nOk, so what does this mean for you? Well, many web apps built with common R and Python libraries do not meet WCAG standards out-of-the-box. How can you test this? If you’ve built a web app, you can toss the URL into a tool like WAVE and see how many error messages you get.\n\n\n\nOk, so what does this mean for you?\n\nBy default, without customising css and html content, it is likely your Python or R webapp does not meet accessibility guidelines (see this great deep dive into RShiny accessibility again from Jumping Rivers).\nThis means that some visitors to your website, particularly those using a screen reader, may not be able to parse your content.\nIt also might mean that your webapp displays poorly, with low contrast, and too-small text font, making it difficult to navigate by sight.\n\nWe should be building a web that is accessible and inclusive to all. You are likely building your webapp because you want to share the results of your research: don’t cut off a cohort of your audience by forgetting accessibility! Also, it’s very likely that you are breaching your institution or funders requirements by producing web output that is not accessible!\n\n\n\n\nIf you already have a webapp, use WAVE to assess it’s current accessibility.\nIf you haven’t a webapp yet, read the UK Government Design Principles before you start designing one. Then, head over to the Guidance page.\n\n\nWebapps can often look amateurish as researchers are not UI/UX designers. One way to improve the appearance of a specific research group’s webapps is to implement a standard style guide that applies across all apps.\nThis can be as simple as:\n\nDefining what theme should be used as standard across all apps (for example, Bootswatch themes are available across RShiny, Shiny for Python, and Dash apps), which quickly provides a cohesive appearance and outsources design choices.\nProviding custom scss and css theming files to build on top of the default base theme, for example pulling in branding colours. For example, you may want the navigation bar to always have a white background, so that your logo can be placed on it while adhering to branding guidelines.\nProviding a footer template with correct copyright and license notices."
  },
  {
    "objectID": "about.html#web-accessibility",
    "href": "about.html#web-accessibility",
    "title": "Getting Started",
    "section": "",
    "text": "To start off, I’d really recommend you read this brief blogpost on web accessibility standards from Jumping Rivers.\nOnce you’ve scrolled through, this website provides you with much more detailed information, including introductory videos. This resource contains a slightly overwhelming amount of information, so I would recommend dipping in and out.\nOk, so what does this mean for you? Well, many web apps built with common R and Python libraries do not meet WCAG standards out-of-the-box. How can you test this? If you’ve built a web app, you can toss the URL into a tool like WAVE and see how many error messages you get."
  },
  {
    "objectID": "about.html#accessibility-concerns",
    "href": "about.html#accessibility-concerns",
    "title": "Getting Started",
    "section": "",
    "text": "Ok, so what does this mean for you?\n\nBy default, without customising css and html content, it is likely your Python or R webapp does not meet accessibility guidelines (see this great deep dive into RShiny accessibility again from Jumping Rivers).\nThis means that some visitors to your website, particularly those using a screen reader, may not be able to parse your content.\nIt also might mean that your webapp displays poorly, with low contrast, and too-small text font, making it difficult to navigate by sight.\n\nWe should be building a web that is accessible and inclusive to all. You are likely building your webapp because you want to share the results of your research: don’t cut off a cohort of your audience by forgetting accessibility! Also, it’s very likely that you are breaching your institution or funders requirements by producing web output that is not accessible!"
  },
  {
    "objectID": "about.html#quick-start",
    "href": "about.html#quick-start",
    "title": "Getting Started",
    "section": "",
    "text": "If you already have a webapp, use WAVE to assess it’s current accessibility.\nIf you haven’t a webapp yet, read the UK Government Design Principles before you start designing one. Then, head over to the Guidance page."
  },
  {
    "objectID": "about.html#branding-and-theming",
    "href": "about.html#branding-and-theming",
    "title": "Getting Started",
    "section": "",
    "text": "Webapps can often look amateurish as researchers are not UI/UX designers. One way to improve the appearance of a specific research group’s webapps is to implement a standard style guide that applies across all apps.\nThis can be as simple as:\n\nDefining what theme should be used as standard across all apps (for example, Bootswatch themes are available across RShiny, Shiny for Python, and Dash apps), which quickly provides a cohesive appearance and outsources design choices.\nProviding custom scss and css theming files to build on top of the default base theme, for example pulling in branding colours. For example, you may want the navigation bar to always have a white background, so that your logo can be placed on it while adhering to branding guidelines.\nProviding a footer template with correct copyright and license notices."
  },
  {
    "objectID": "about.html#where-to-begin",
    "href": "about.html#where-to-begin",
    "title": "Getting Started",
    "section": "Where to begin?",
    "text": "Where to begin?\n\n\n\n\n\n\nI already have a webapp that I want to improve\n\n\n\n\n\nUse the WAVE tool to assess your webapp’s accessibility.\nFixing these issus can be a challenge: different libraries and frameworks for building apps will have different ways of accessing and modifying things like HTML tags. Again, see this deep dive into RShiny accessibility to see how you might want to approach this.\n\n\n\n\n\n\n\n\n\nI’m building a new webapp\n\n\n\n\n\nThen you’re the ideal audience for this resource.\nFirst, read through the UK Government Design Principles and think about how this could be applied to your prospective webapp. Then, head over to Guidance to see our step-by-step guide."
  }
]